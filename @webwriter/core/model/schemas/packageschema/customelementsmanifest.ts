// Generated by ts-to-zod
import { z } from "zod";

export const ManifestReference = z.object({
  name: z.string(),
  package: z.string().optional(),
  module: z.string().optional(),
});

export const ManifestSourceReference = z.object({
  href: z.string(),
});

export const ManifestSlot = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestCSSPart = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestCSSCustomProperty = z.object({
  name: z.string(),
  syntax: z.string().optional(),
  default: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestDemo = z.object({
  description: z.string().optional(),
  url: z.string(),
  source: ManifestSourceReference.optional(),
});

export const ManifestTypeReference = ManifestReference.extend({
  start: z.number().optional(),
  end: z.number().optional(),
});

export const ManifestPrivacy = z.union([
  z.literal("public"),
  z.literal("private"),
  z.literal("protected"),
]);

export const ManifestJavaScriptExport = z.object({
  kind: z.literal("js"),
  name: z.string(),
  declaration: ManifestReference,
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestCustomElementExport = z.object({
  kind: z.literal("custom-element-definition"),
  name: z.string(),
  declaration: ManifestReference,
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestType = z.object({
  text: z.string(),
  References: z.array(ManifestTypeReference).optional(),
  source: ManifestSourceReference.optional(),
});

export const ManifestPropertyLike = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  type: ManifestType.optional(),
  default: z.string().optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
  readonly: z.boolean().optional(),
});

export const ManifestParameter = ManifestPropertyLike.extend({
  optional: z.boolean().optional(),
  rest: z.boolean().optional(),
});

export const ManifestExport = z.union([
  ManifestJavaScriptExport,
  ManifestCustomElementExport,
]);

export const ManifestVariableDeclaration = ManifestPropertyLike.extend({
  kind: z.literal("variable"),
  source: ManifestSourceReference.optional(),
});

export const ManifestAttribute = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  inheritedFrom: ManifestReference.optional(),
  type: ManifestType.optional(),
  default: z.string().optional(),
  fieldName: z.string().optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestEvent = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  type: ManifestType,
  inheritedFrom: ManifestReference.optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestClassField = ManifestPropertyLike.extend({
  kind: z.literal("field"),
  static: z.boolean().optional(),
  privacy: ManifestPrivacy.optional(),
  inheritedFrom: ManifestReference.optional(),
  source: ManifestSourceReference.optional(),
});

export const ManifestCustomElementField = ManifestClassField.extend({
  attribute: z.string().optional(),
  reflects: z.boolean().optional(),
});

export const ManifestFunctionLike = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
  parameters: z.array(ManifestParameter).optional(),
  return: z
    .object({
      type: ManifestType.optional(),
      summary: z.string().optional(),
      description: z.string().optional(),
    })
    .optional(),
});

export const ManifestFunctionDeclaration = ManifestFunctionLike.extend({
  kind: z.literal("function"),
  source: ManifestSourceReference.optional(),
});

export const ManifestClassMethod = ManifestFunctionLike.extend({
  kind: z.literal("method"),
  static: z.boolean().optional(),
  privacy: ManifestPrivacy.optional(),
  inheritedFrom: ManifestReference.optional(),
  source: ManifestSourceReference.optional(),
});

export const ManifestClassMember = z.union([ManifestClassField, ManifestClassMethod]);

export const ManifestClassLike = z.object({
  name: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  superclass: ManifestReference.optional(),
  mixins: z.array(ManifestReference).optional(),
  members: z.array(ManifestClassMember).optional(),
  source: ManifestSourceReference.optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestClassDeclaration = ManifestClassLike.extend({
  kind: z.literal("class"),
});

export const ManifestMixinDeclaration = ManifestClassLike
  .extend(ManifestFunctionLike.shape)
  .extend({
    kind: z.literal("mixin"),
  });

export const ManifestCustomElement = ManifestClassLike.extend({
  tagName: z.string().optional(),
  attributes: z.array(ManifestAttribute).optional(),
  events: z.array(ManifestEvent).optional(),
  slots: z.array(ManifestSlot).optional(),
  cssParts: z.array(ManifestCSSPart).optional(),
  cssProperties: z.array(ManifestCSSCustomProperty).optional(),
  demos: z.array(ManifestDemo).optional(),
  customElement: z.literal(true),
});

export const ManifestCustomElementDeclaration = ManifestClassDeclaration.extend(
  ManifestCustomElement.shape
);

export const ManifestCustomElementMixinDeclaration = ManifestMixinDeclaration.extend(
  ManifestCustomElement.shape
);

export const ManifestDeclaration = z.union([
  ManifestClassDeclaration,
  ManifestFunctionDeclaration,
  ManifestMixinDeclaration,
  ManifestVariableDeclaration,
  ManifestCustomElementDeclaration,
  ManifestCustomElementMixinDeclaration,
]);

export const ManifestJavaScriptModule = z.object({
  kind: z.literal("javascript-module"),
  path: z.string(),
  summary: z.string().optional(),
  description: z.string().optional(),
  declarations: z.array(ManifestDeclaration).optional(),
  exports: z.array(ManifestExport).optional(),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});

export const ManifestModule = ManifestJavaScriptModule;

export const CustomElementManifest = z.object({
  schemaVersion: z.string(),
  readme: z.string().optional(),
  modules: z.array(ManifestModule),
  deprecated: z.union([z.boolean(), z.string()]).optional(),
});