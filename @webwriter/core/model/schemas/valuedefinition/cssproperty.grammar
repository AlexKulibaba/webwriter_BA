@top PropertyExpression { expression }

expression { _w propertyToken (__w propertyToken)* _w }

@precedence { color @left, reference-function @left, gradient-function @left, oneortwo @left, twoorthree @left, linear-color-stop @left, fixed-breadth @left, commalist @left, subset2 @left, unorderedseq2 @left, position @left, length @left, percentage @left, w @left }

propertyToken { literal | function | ident }

literal[@isGroup=Literal] { String | Integer | Number | Percentage | Ratio | Flex | Length | Angle | Time | Frequency | Resolution | Color | image }

String { single-quoted-string | double-quoted-string }
Integer { integer }
Number { number }
Percentage { number percent }
Ratio { positive-integer _w "/" _w positive-integer }
Flex { number fr }
Length { number (cap | ch | em | ex | ic | lh | rcap | rch | rem | rex | ric | rlh | vh | vw | vmax | vmin | vb | vi | cqw | cqh | cqi | cqb | cqmin | cqmax | px | cm | mm | q | in | pc | pt) }
Angle { number (deg | grad | rad | turn) }
Time { number (s | ms) }
Frequency { number (hz | khz) }
Resolution { number (dpi | dpcm | dppx | x) }
Color { hex-color | !color color-function | named-color | "transparent" | "currentColor" }
image { Url | Src }

function[@isGroup=Function] {
  transform-function | math-function | filter-function | color-function | image-function | counter-function | shape-function | reference-function | grid-function | font-function | easing-function | animation-function
}

ident[@isGroup=Ident] { KeywordOrCustomIdent | DashedIdent | Initial | Inherit | Revert | Unset}

KeywordOrCustomIdent { identifier }
DashedIdent { dashed-ident }
Initial { "initial" }
Inherit { "inherit" }
Revert { "revert" }
Unset { "unset" }

transform-function[@isGroup=TransformFunction] {
  TranslateX { func<"translateX", (Length | Percentage)> } |
  TranslateY { func<"translateY", (Length | Percentage)> } |
  TranslateZ { func<"translateZ", (Length | Percentage)> } |
  Translate { func1or2<"translate", Length | Percentage, Length | Percentage> } |
  Translate3d { func3<"translate3d", Length | Percentage, Length | Percentage, Length | Percentage> } |
  RotateX { func<"rotateX", Angle> } |
  RotateY { func<"rotateY", Angle> } |
  RotateZ { func<"rotateZ", Angle> } |
  Rotate { func1or2<"rotate", Angle, Angle> } |
  Rotate3d { func3<"rotate3d", Angle, Angle, Angle> } |
  ScaleX { func<"scaleX", Number> } |
  ScaleY { func<"scaleY", Number> } |
  ScaleZ { func<"scaleZ", Number> } |
  Scale { func1or2<"scale", Number, Number> } |
  Scale3d { func3<"scale3d", Number, Number, Number> } |
  SkewX { func<"skewX", Angle> } |
  SkewY { func<"skewY", Angle> } |
  Skew { func1or2<"skew", Angle, Angle> } |
  Matrix { func<"matrix", Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number> } |
  Matrix3d { func<"matrix3d", Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number _w "," _w Number> } |
  Perspective { func<"perspective", Length> }
}

math-function[@isGroup=MathFunction] {
  Calc { func<"calc", calc-sum> } |
  Min { funcN<"min", calc-sum> } |
  Max { funcN<"max", calc-sum> } |
  Clamp { func3<"clamp", calc-sum | "none", calc-sum, calc-sum | "none"> } |
  Round { func<"round", (("nearest" | "up" | "down" | "to-zero") _w "," _w)? calc-sum (_w "," _w calc-sum)?> } |
  Mod { func2<"mod", calc-sum, calc-sum> } |
  Rem { func2<"rem", calc-sum, calc-sum> } |
  Sin { func<"sin", calc-sum> } |
  Cos { func<"cos", calc-sum> } |
  Tan { func<"tan", calc-sum> } |
  Asin { func<"asin", calc-sum> } |
  Acos { func<"acos", calc-sum> } |
  Atan { func<"atan", calc-sum> } |
  Atan2 { func<"atan2", calc-sum> } |
  Pow { func2<"pow", calc-sum, calc-sum> } |
  Sqrt { func<"sqrt", calc-sum> } |
  Hypot { funcN<"hypot", calc-sum> } |
  Log { func1or2<"log", calc-sum, calc-sum> } |
  Exp { func<"exp", calc-sum> } |
  Abs { func<"abs", calc-sum> } |
  Sign { func<"sign", calc-sum> }
}

filter-function[@isGroup=FilterFunction] {
  Blur { func<"blur", Length> } |
  Brightness { func<"brightness", Number | Percentage> } |
  Contrast { func<"contrast", Number | Percentage> } |
  DropShadow { func<"drop-shadow", unorderedseq2<Color?, twoorthree<Length>>> } |
  Grayscale { func<"grayscale", Number | Percentage> } |
  HueRotate { func<"hue-rotate", (Angle | "0")?> } |
  Invert { func<"invert", Number | Percentage> } |
  Opacity { func<"opacity", Number | Percentage> } |
  Saturate { func<"saturate", Number | Percentage> } |
  Sepia { func<"sepia", Number | Percentage> }
}

color-function[@isGroup=ColorFunction] {
  Rgb { color-func<"rgb" | "rgba", Percentage | Number, Percentage | Number, Percentage | Number> | color-func-legacy<"rgb" | "rgba", Percentage, Percentage, Percentage> | color-func-legacy<"rgb" | "rgba", Number, Number, Number> } |
  Hsl { color-func<"hsl" | "hsla", Number | Angle, Percentage | Number, Percentage | Number> | color-func-legacy<"hsl" | "hsla", Number | Angle, Percentage, Percentage> } |
  Hwb { color-func<"hwb", Number | Angle, Percentage | Number, Percentage | Number> } |
  Lab { color-func<"lab", Percentage | Number, Percentage | Number, Percentage | Number> } |
  Lch { color-func<"lch", Percentage | Number, Percentage | Number, Number | Angle> } |
  Oklab { color-func<"oklab", Percentage | Number, Percentage | Number, Percentage | Number> } |
  Oklch { color-func<"oklch", Percentage | Number, Percentage | Number, Number | Angle> } |
  ColorF { func<"color", (_w "from" _w Color _w)? colorspace-params (_w "/" _w (Number | Percentage | "none"))?> } |
  ColorMix { func<"color-mix", ("in" __w ((rectangular-color-space | polar-color-space) __w hue-interpolation-method?) _w "," _w oneortwoof<Color, Percentage> _w "," _w oneortwoof<Color, Percentage> ) > } |
  ColorContrast { func<"color-contrast", Color __w "vs" __w Color (_w "," _w Color)*> } |
  DeviceCmyk { func4<"device-cmyk", Number, Number, Number, Number> | color-func4<"device-cmyk", Number | Percentage, Number | Percentage, Number | Percentage, Number | Percentage> } |
  LightDark { func2<"light-dark", Color, Color> }
}

image-function[@isGroup=ImageFunction] {
  Image { func<"image", ("ltr" | "rtl")? ((Url | Src | String) (_w "," _w Color)?) | (Color (_w "," _w (Url | Src | String))?) > } |
  ImageSet { funcN<"image-set", (image | String) __w !subset2 subset2<Resolution, func<"type", String>>?> } |
  CrossFade { func3<"cross-fade", image, image, Percentage> | funcN<"cross-fade", unorderedseq2<image | Color, Percentage?>> } |
  Element { func<"element", "#" KeywordOrCustomIdent> } |
  Paint { func<"paint", KeywordOrCustomIdent commalist<propertyToken>?> }
}

gradient-function[@isGroup=GradientFunction] {
  LinearGradient { func<"linear-gradient", (Angle | ("to" _w oneortwoof<"left" | "right", "top" | "bottom">) _w "," _w)? color-stop-list> } |
  RadialGradient { func<"radial-gradient", oneortwoof<"circle" | "ellipse", radial-extent | Length | two<(Length Percentage)>>? (_w "at" _w position)? _w ","? _w color-stop-list> } |
  ConicGradient { func<"conic-gradient", oneortwoof<("from" __w Angle __w)? ("at" __w !position position __w)?, "in" __w (rectangular-color-space | polar-color-space) (__w hue-interpolation-method)?>  _w "," _w angular-color-stop-list> } |
  RepeatingLinearGradient { func<"repeating-linear-gradient", (Angle | ("to" _w oneortwoof<"left" | "right", "top" | "bottom">) _w "," _w)? color-stop-list> } |
  RepeatingRadialGradient { func<"repeating-radial-gradient", oneortwoof<"circle" | "ellipse", radial-extent | Length | two<(Length Percentage)>>? (_w "at" _w position)? _w ","? _w color-stop-list> } |
  RepeatingConicGradient { func<"repeating-conic-gradient", oneortwoof<("from" __w Angle __w)? ("at" __w position __w)?, "in" __w (rectangular-color-space | polar-color-space) (__w hue-interpolation-method)?>  _w "," _w angular-color-stop-list> }
}

counter-function[@isGroup=CounterFunction] { Counter | Counters | Symbols}

Counter { func1or2<"counter", KeywordOrCustomIdent, String | list-style-type | Symbols>}
Counters { func2or3<"counters", KeywordOrCustomIdent, String, String | list-style-type | Symbols> }
Symbols { func<"symbols", symbols-type? (__w (String | image))+> }

shape-function[@isGroup=ShapeFunction] {
  Circle { func<"circle", shape-radius (__w "at" __w position)?> } |
  Ellipse { func<"ellipse", shape-radius shape-radius (__w "at" __w position)?> } |
  Inset { func<"inset", onetofour<shape-radius> (_w "/" _w onetofour<shape-radius>)?> } |
  Rect { func<"rect", four<Length | Percentage | "auto"> (__w "round" __w border-radius)?> } |
  Xywh { func<"xywh", four<Length | Percentage> (__w "round" __w border-radius)?> } |
  Polygon { func<"polygon", ("nonzero" | "evenodd" __w)? commalist<(Length | Percentage) __w (Length | Percentage)>> } |
  Path { func<"path", ("nonzero" | "evenodd" __w)? String> }
}

reference-function[@isGroup=ReferenceFunction] {
  !reference-function Url |
  !reference-function Src |
  Attr { func1or2<"attr", (KeywordOrCustomIdent "|")? KeywordOrCustomIdent attr-type?, propertyToken> } |
  Env { func1or2<"env", KeywordOrCustomIdent __w positive-integer*, propertyToken> } |
  Var { func1or2<"var", DashedIdent, propertyToken> }
}

Url { func<"url", String> }
Src { func<"src", String> }

grid-function[@isGroup=GridFunction] {
  FitContent { func<"fit-content", Length | Percentage>} |
  Minmax { func2<"minmax", Length | Percentage | Flex | "max-content" | "min-content" | "auto", Length | Percentage | Flex | "max-content" | "min-content" | "auto">} |
  Repeat { func2<"repeat", natural, (line-names? __w track-size)+ __w line-names? > | func2<"repeat", ("auto-fill" | "auto-fit" | natural), (line-names? __w fixed-size)+ __w line-names?> | func2<"repeat", natural | "auto-fill", line-names+> }
}

font-function[@isGroup=FontFunction] {
  Stylistic { func<"stylistic", KeywordOrCustomIdent> } |
  Styleset { funcN<"styleset", KeywordOrCustomIdent>} |
  CharacterVariant { funcN<"character-variant", KeywordOrCustomIdent> } |
  Swash { func<"swash", KeywordOrCustomIdent> } |
  Ornaments { func<"ornaments", KeywordOrCustomIdent> } |
  Annotation { func<"annotation", KeywordOrCustomIdent> }
}

easing-function[@isGroup=EasingFunction] {
  Linear { funcN<"linear", unorderedseq2<Number, oneortwo<Percentage>?>> } |
  CubicBezier { func4<"cubic-bezier", Number, Number, Number, Number> } |
  Steps { func<"steps", Integer ( _w "," _w step-position)?> }
}

animation-function[@isGroup=AnimationFunction] {
  Scroll { func<"scroll", subset2<scroller, axis>> } |
  View { func<"view", subset2<axis, commalist<oneortwo<"auto" | Length | Percentage>>>> }
}

shape-radius { Length | Percentage | "closest-side" | "farthest-side" }
border-radius { onetofour<Length | Percentage> }
calc-value { Number | Percentage | calc-keyword }
calc-product { calc-value _w ( ("*" | "/") calc-value )* }
calc-sum { calc-product _w ( ("+" | "-") calc-product )* }

func<name, parameters> { name "(" _w parameters _w ")"}
func0<name> { func<name, ""> }
func1or2<name, p1, p2> { func<name, p1 (_w "," _w p2)?> }
func2or3<name, p1, p2, p3> { func<name, p1 _w "," _w p2 (_w "," _w p3)?> }
func2<name, p1, p2> { func<name, p1 _w "," _w p2> }
func3<name, p1, p2, p3> { func<name, p1 _w "," _w p2 _w "," _w p3> }
func4<name, p1, p2, p3, p4> { func<name, p1 _w "," _w p2 _w "," _w p3 _w "," _w p4> }
funcN<name, p> { func<name, commalist<p>> }
color-func<name, p1, p2, p3> { func<name, (p1 | "none") __w (p2 | "none") __w (p3 | "none") ( _w "/" _w (Number | Percentage | "none"))?> }
color-func-legacy<name, p1, p2, p3> { func<name, p1 _w "," _w p2 _w "," _w p3 (_w "," _w (Number | Percentage))?> }
color-func4<name, p1, p2, p3, p4> { func<name, (p1 | "none") __w (p2 | "none") __w (p3 | "none") __w (p4 | "none") ( _w "/" _w (Number | Percentage | "none"))?> }
subset2<a, b> { (!subset2 a (__w b)?)? | (!subset2 b (__w a)?)? }
oneortwoof<a, b> { (a (__w b)?) | (b (__w a)?) }
unorderedseq2<a, b> { (a __w b) | (b __w a) }
oneortwo<a> { !oneortwo (a) | (a __w a)}
twoorthree<a> { !twoorthree (a __w a) | (a __w a __w a)}
onetofour<a> { a | (a __w a) | (a __w a __w a) | (a __w a __w a __w a) }
two<a> { a __w a }
three<a> { a __w a __w a }
four<a> { a __w a __w a __w a }
commalist<a> { !commalist a (__w "," __w a)* }
colorspace-params { custom-params | predefined-rgb-params | predefined-polar-params | predefined-rectangular-params | xyz-params }
custom-params { dashed-ident (__w (Number | Percentage | "none") )+ }
predefined-rgb-params { predefined-rgb three<__w (Number | Percentage | "none")> }
predefined-polar-params { "jzczhz" two<__w (Number | Percentage | "none")> __w (Number | Angle) }
predefined-rectangular-params { predefined-rectangular three<__w (Number | Percentage | "none")> }
xyz-params { three<Number | Percentage | "none"> }
linear-color-stop { !linear-color-stop Color (__w Length | Percentage)? }
color-stop-list { linear-color-stop _w "," _w commalist<(Length | Percentage _w "," )? _w "," _w linear-color-stop> }
angular-color-stop { Color oneortwo<(__w Angle | Percentage)> }
angular-color-stop-list { angular-color-stop _w "," _w commalist<(Angle | Percentage _w "," )? _w "," _w angular-color-stop> }
position { ("left" | "center" | "right" | "top" | "bottom" | Length | Percentage) | unorderedseq2<"left" | "center" | "right", "top" | "center" | "bottom"> | (("left" | "center" | "right" | Length | Percentage) ("top" | "center" | "bottom" | Length | Percentage)) | unorderedseq2<("left" | "right") (Length | Percentage), ("top" | "bottom") (Length | Percentage)> }
track-size { track-breadth | "minmax(" _w inflexible-breadth _w "," _w track-breadth  _w")" | "fit-content(" _w Length | Percentage _w ")" }
fixed-size { fixed-breadth | "minmax(" _w fixed-breadth _w "," _w track-breadth _w ")" | "minmax(" _w inflexible-breadth _w "," _w fixed-breadth _w ")" }
track-breadth { Length | Percentage | Flex | "min-content" | "max-content" | "auto" }
fixed-breadth { !fixed-breadth (Length | Percentage) }
inflexible-breadth { Length | Percentage | "min-content" | "max-content" | "auto" }

_w { !w w* }

@tokens {
  @precedence { "0", hex-color, positive-integer, integer, number, "rgb", "rgba", "hsl", "hsla", "hwb", "lab", "lch", "oklab", "oklch", "color", "color-mix", "color-contrast", "device-cmyk", "light-dark", "transparent", "currentColor", "url", "src", "translateX", "translateY", "translateZ", "translate", "translate3d", "rotateX", "rotateY", "rotateZ", "rotate", "rotate3d", "scaleX", "scaleY", "scaleZ", "scale", "scale3d", "skewX", "skewY", "skew", "matrix", "matrix3d", "perspective", "calc", "min", "max", "clamp", "round", "mod", "rem", "sin", "cos", "tan", "asin", "acos", "atan", "atan2", "pow", "sqrt", "hypot", "log", "exp", "abs", "sign", "blur", "brightness", "circle", "contrast", "drop-shadow", "grayscale", "hue-rotate", "invert", "opacity", "saturate", "sepia", "image", "image-set", "cross-fade", "element", "annotation", "attr", "character-variant", "counter", "counters", "cubic-bezier", "ellipse", "env", "fit-content", "inherit", "initial", "inset", "linear", "minmax", "ornaments", "paint", "path", "polygon", "rect", "repeat", "revert", "scroll", "steps", "styleset", "stylistic", "swash", "symbols", "unset", "var", "view", "xywh", named-color, identifier }
  @precedence { __w, w }
  escaped-char { "\\"$[.]}
  hex-digit { $[0-9A-Fa-f] }
  unicode-point { "\\" hex-digit hex-digit? hex-digit? hex-digit? hex-digit? hex-digit? }
  identifier { $[a-zA-Z_] ($[a-zA-Z0-9_\-] | escaped-char | unicode-point)* }
  dashed-ident {  "--" identifier }
  single-quoted-string { '"' (!["\\] | escaped-char) '"' }
  double-quoted-string { "'" (!['\\] | escaped-char) "'" }
  integer { ("+" | "-")? @digit @digit* }
  natural { "+"? $[1-9] @digit* }
  positive-integer { "+"? @digit @digit* }
  float { ("+" | "-")? @digit* "." @digit @digit* }
  scientific { (integer | float) "e" ("+" | "-")? @digit+}
  number { integer | float | scientific }
  number0-1 { "+"? (("0" ("." "0"+)?) | (0 "." @digit @digit*) | ("1"  ("." "0"+)?)) }
  percent { "%" }
  fr { "fr" | "Fr" | "fR" | "FR" }
  cap { "cap" | "Cap" | "cAp" | "CAp" | "caP" | "CaP" | "cAP" | "CAP" }
  ch { "ch" | "Ch" | "cH" | "CH" }
  em { "em" | "Em" | "eM" | "EM" }
  ex { "ex" | "Ex" | "eX" | "EX" }
  ic { "ic" | "Ic" | "iC" | "IC" }
  lh { "lh" | "Lh" | "lH" | "LH" }
  rcap { "rcap" | "Rcap" | "rCap" | "RCap" | "rcAp" | "RcAp" | "rCAp" | "RCAp" | "rcaP" | "RcaP" | "rCaP" | "RCaP" | "rcAP" | "RcAP" | "rCAP" | "RCAP" }
  rch { "rch" | "Rch" | "rCh" | "RCh" | "rcH" | "RcH" | "rCH" | "RCH" }
  rem { "rem" | "Rem" | "rEm" | "REm" | "reM" | "ReM" | "rEM" | "REM" }
  rex { "rex" | "Rex" | "rEx" | "REx" | "reX" | "ReX" | "rEX" | "REX" }
  ric { "ric" | "Ric" | "rIc" | "RIc" | "riC" | "RiC" | "rIC" | "RIC" }
  rlh { "rlh" | "Rlh" | "rLh" | "RLh" | "rlH" | "RlH" | "rLH" | "RLH" }
  vh { "vh" | "Vh" | "vH" | "VH" }
  vw { "vw" | "Vw" | "vW" | "VW" }
  vmax { "vmax" | "Vmax" | "vMax" | "VMax" | "vmAx" | "VmAx" | "vMAx" | "VMAx" | "vmaX" | "VmaX" | "vMaX" | "VMaX" | "vmAX" | "VmAX" | "vMAX" | "VMAX" }
  vmin { "vmin" | "Vmin" | "vMin" | "VMin" | "vmIn" | "VmIn" | "vMIn" | "VMIn" | "vmiN" | "VmiN" | "vMiN" | "VMiN" | "vmIN" | "VmIN" | "vMIN" | "VMIN" }
  vb { "vb" | "Vb" | "vB" | "VB" }
  vi { "vi" | "Vi" | "vI" | "VI" }
  cqw { "cqw" | "Cqw" | "cQw" | "CQw" | "cqW" | "CqW" | "cQW" | "CQW" }
  cqh { "cqh" | "Cqh" | "cQh" | "CQh" | "cqH" | "CqH" | "cQH" | "CQH" }
  cqi { "cqi" | "Cqi" | "cQi" | "CQi" | "cqI" | "CqI" | "cQI" | "CQI" }
  cqb { "cqb" | "Cqb" | "cQb" | "CQb" | "cqB" | "CqB" | "cQB" | "CQB" }
  cqmin { "cqmin" | "Cqmin" | "cQmin" | "CQmin" | "cqMin" | "CqMin" | "cQMin" | "CQMin" | "cqmIn" | "CqmIn" | "cQmIn" | "CQmIn" | "cqMIn" | "CqMIn" | "cQMIn" | "CQMIn" | "cqmiN" | "CqmiN" | "cQmiN" | "CQmiN" | "cqMiN" | "CqMiN" | "cQMiN" | "CQMiN" | "cqmIN" | "CqmIN" | "cQmIN" | "CQmIN" | "cqMIN" | "CqMIN" | "cQMIN" | "CQMIN" }
  cqmax { "cqmax" | "Cqmax" | "cQmax" | "CQmax" | "cqMax" | "CqMax" | "cQMax" | "CQMax" | "cqmAx" | "CqmAx" | "cQmAx" | "CQmAx" | "cqMAx" | "CqMAx" | "cQMAx" | "CQMAx" | "cqmaX" | "CqmaX" | "cQmaX" | "CQmaX" | "cqMaX" | "CqMaX" | "cQMaX" | "CQMaX" | "cqmAX" | "CqmAX" | "cQmAX" | "CQmAX" | "cqMAX" | "CqMAX" | "cQMAX" | "CQMAX" }
  cm { "cm" | "Cm" | "cM" | "CM" }
  mm { "mm" | "Mm" | "mM" | "MM" }
  q { "q" | "Q"}
  in { "in" | "In" | "iN" | "IN" }
  pc { "pc" | "Pc" | "pC" | "PC" }
  pt { "pt" | "Pt" | "pT" | "PT" }
  px { "px" | "Px" | "pX" | "PX" }
  deg { "deg" | "Deg" | "dEg" | "DEg" | "deG" | "DeG" | "dEG" | "DEG" }
  grad { "grad" | "Grad" | "gRad" | "GRad" | "grAd" | "GrAd" | "gRAd" | "GRAd" | "graD" | "GraD" | "gRaD" | "GRaD" | "grAD" | "GrAD" | "gRAD" | "GRAD" }
  rad { "rad" | "Rad" | "rAd" | "RAd" | "raD" | "RaD" | "rAD" | "RAD" }
  turn { "turn" | "Turn" | "tUrn" | "TUrn" | "tuRn" | "TuRn" | "tURn" | "TURn" | "turN" | "TurN" | "tUrN" | "TUrN" | "tuRN" | "TuRN" | "tURN" | "TURN" }
  s { "s" | "S" }
  ms { "ms" | "Ms" | "mS" | "MS" }
  hz { "hz" | "Hz" | "hZ" | "HZ" }
  khz { "khz" | "Khz" | "kHz" | "KHz" | "khZ" | "KhZ" | "kHZ" | "KHZ" }
  dpi { "dpi" | "Dpi" | "dPi" | "DPi" | "dpI" | "DpI" | "dPI" | "DPI" }
  dpcm { "dppcm" | "Dppcm" | "dPpcm" | "DPpcm" | "dpPcm" | "DpPcm" | "dPPcm" | "DPPcm" | "dppCm" | "DppCm" | "dPpCm" | "DPpCm" | "dpPCm" | "DpPCm" | "dPPCm" | "DPPCm" | "dppcM" | "DppcM" | "dPpcM" | "DPpcM" | "dpPcM" | "DpPcM" | "dPPcM" | "DPPcM" | "dppCM" | "DppCM" | "dPpCM" | "DPpCM" | "dpPCM" | "DpPCM" | "dPPCM" | "DPPCM" }
  dppx { "dppx" | "Dppx" | "dPpx" | "DPpx" | "dpPx" | "DpPx" | "dPPx" | "DPPx" | "dppX" | "DppX" | "dPpX" | "DPpX" | "dpPX" | "DpPX" | "dPPX" | "DPPX" }
  x { "x" | "X" }
  __w { @whitespace+ }
  w { @whitespace }
  scroller { "root" | "nearest" | "self" }
  axis { "block" | "inline" | "x" | "y" }
  step-position { "jump-start" | "jump-end" | "jump-none" | "jump-both" | "start" | "end" }
  list-style-type { "none" | "disc" | "circle" | "square" | "decimal" | "cjk-decimal" | "decimal-leading-zero" | "lower-roman" | "upper-roman" | "lower-greek" | "lower-alpha" | "lower-latin" | "upper-alpha" | "upper-latin" | "arabic-indic" | "armenian" | "bengali" | "cambodian" | "cjk-earthly-branch" | "cjk-heavenly-stem" | "cjk-ideographic" | "devanagari" | "ethiopic-numeric" | "georgian" | "gujarati" | "gurmukhi" | "hebrew" | "hiragana" | "hiragana-iroha" | "japanese-formal" | "japanese-informal" | "kannada" | "katakana" | "katakana-iroha" | "khmer" | "korean-hangul-formal" | "korean-hanja-formal" | "korean-hanja-informal" | "lao" | "lower-armenian" | "malayalam" | "mongolian" | "myanmar" | "oriya" | "persian" | "simp-chinese-formal" | "simp-chinese-informal" | "tamil" | "telugu" | "thai" | "tibetan" | "trad-chinese-formal" | "trad-chinese-informal" | "upper-armenian" | "disclosure-open" | "disclosure-closed"}
  symbols-type { "cyclic" | "numeric" | "alphabetic" | "symbolic" | "fixed" }
  named-color { "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "goldenrod" | "gold" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavenderblush" | "lavender" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen" }
  hex-color { "#" (hex-digit hex-digit hex-digit) | (hex-digit hex-digit hex-digit hex-digit) | (hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit) | (hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit) }
  line-names { "[" @whitespace* identifier? (__w identifier)* @whitespace* "]" }
  calc-keyword { "e" | "pi" | "infinity" | "-infinity" | "NaN" }
  predefined-rgb { "srgb" | "srgb-linear" | "display-p3" | "a98-rgb" | "prophoto-rgb" | "rec2020" | "rec2100-pq" | "rec2100-hlg" | "rec2100-linear" }
  rectangular-color-space { "srgb" | "srgb-linear" | "display-p3" | "a98-rgb" | "prophoto-rba" | "rec2020" | "lab" | "oklab" | "xyz" | "xyz-d50" | "xyz-d65" }
  polar-color-space { "hsl" | "hwb" | "lch" | "oklch" }
  predefined-rectangular { "jzazbz" | "ictcp" }
  xyz { "xyz" | "xyz-d50" | "xyz-d65" }
  hue-interpolation-method { ("shorter" | "longer" | "increasing" | "decreasing") __w "hue" }
  radial-extent { "closest-corner" | "closest-side" | "farthest-corner" | "farthest-side" }
  attr-type { "string" | "ident" | "color" | "number" | "percentage" | "length" | "angle" | "time" | "frequency" | "flex" | "em" | "ex" | "px" | "rem" | "vw" | "vh" | "vmin" | "vmax" | "mm" | "cm" | "in" | "pt" | "pc" | "deg" | "grad" | "rad" | "time" | "s" | "ms" | "Hz" | "kHz" | "%" }
}