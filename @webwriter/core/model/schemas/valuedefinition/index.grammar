@top ValueDefinition { expression }


expression { simpleExpression | complexExpression | groupExpression }

simpleExpression { Literal | stringExpression | PropertyReference | DataType }

complexExpression { OrderedSequence | UnorderedSequence | Subset | Alternation }

groupExpression {
  Group<simpleExpression | complexExpression>
}

stringExpression {
  (string | String { literalString }) quantifier?
}

Literal { 
  Identifier quantifier?
}

PropertyReference { 
  "<'" Identifier "'>" quantifier?
}

DataType { 
  "<" Identifier ">" quantifier?
}


OrderedSequence { list<simpleExpression | groupExpression, ""> }

UnorderedSequence { list<simpleExpression | groupExpression | OrderedSequence, "&&"> }

Subset { list<simpleExpression | groupExpression | OrderedSequence | UnorderedSequence, "||"> }

Alternation { list<simpleExpression | groupExpression | OrderedSequence | UnorderedSequence | Subset, "|"> }

list<expr, sep> { expr (sep expr)+ }
Group<expr> {"[" expr "]" (Required | quantifier)?}

quantifier[@isGroup=Quantifier] { ZeroOrMore | OneOrMore | ZeroOrOne | Some | OneOrMoreCommaSeparated }

ZeroOrMore { "*" }
OneOrMore { "+" }
ZeroOrOne { "?" }
Some { ("{" Min { number } "}") | "{" Min { number } "," Max { number } "}" }
OneOrMoreCommaSeparated { "#" (ZeroOrMore | OneOrMore | ZeroOrOne | Some)? }

@tokens {
  or { "|" }
  andor { "||" }

  Identifier { $[a-zA-Z0-9_\-]+ }
  literalString { "," | "." | "(" | ")" | "/" }
  whitespace { $[ \n\r\t]}
  Required { "!" }
  number { @digit+ }
}

@local tokens {
  stringEndSingle { "'" }
  stringEndDouble { '"' }
  stringEscape { "\\" _ }
  @else String
}

@skip {} {
  string { ("'" (String | stringEscape)* stringEndSingle) | ('"' (String | stringEscape)* stringEndDouble) }
}

@skip { whitespace }